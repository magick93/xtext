/**
 * generated by Xtext 2.17.0.M2
 */
package org.domaindriven.model.dsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.domaindriven.model.dsl.services.DddGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import sculptormetamodel.Application;
import sculptormetamodel.Consumer;
import sculptormetamodel.DomainObject;
import sculptormetamodel.Resource;
import sculptormetamodel.Service;

@SuppressWarnings("all")
public class DddFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DddGrammarAccess _dddGrammarAccess;
  
  protected void _format(final Application application, @Extension final IFormattableDocument document) {
    EList<sculptormetamodel.Module> _modules = application.getModules();
    for (final sculptormetamodel.Module module : _modules) {
      document.<sculptormetamodel.Module>format(module);
    }
  }
  
  protected void _format(final sculptormetamodel.Module module, @Extension final IFormattableDocument document) {
    EList<DomainObject> _domainObjects = module.getDomainObjects();
    for (final DomainObject domainObject : _domainObjects) {
      document.<DomainObject>format(domainObject);
    }
    EList<Service> _services = module.getServices();
    for (final Service service : _services) {
      document.<Service>format(service);
    }
    EList<Consumer> _consumers = module.getConsumers();
    for (final Consumer consumer : _consumers) {
      document.<Consumer>format(consumer);
    }
    EList<Resource> _resources = module.getResources();
    for (final Resource resource : _resources) {
      document.<Resource>format(resource);
    }
  }
  
  public void format(final Object application, final IFormattableDocument document) {
    if (application instanceof XtextResource) {
      _format((XtextResource)application, document);
      return;
    } else if (application instanceof Application) {
      _format((Application)application, document);
      return;
    } else if (application instanceof sculptormetamodel.Module) {
      _format((sculptormetamodel.Module)application, document);
      return;
    } else if (application instanceof EObject) {
      _format((EObject)application, document);
      return;
    } else if (application == null) {
      _format((Void)null, document);
      return;
    } else if (application != null) {
      _format(application, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(application, document).toString());
    }
  }
}
