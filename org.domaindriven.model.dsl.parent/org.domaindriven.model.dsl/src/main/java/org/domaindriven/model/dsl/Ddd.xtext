// automatically generated by Xtext
grammar org.domaindriven.model.dsl.Ddd with org.eclipse.xtext.common.Terminals

import "http://sculptor.org/sculptor" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Application returns Application:
	{Application}
	'Application'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('basePackage' basePackage=EString)?
		('modules' '{' modules+=Module ( "," modules+=Module)* '}' )?
	'}';


DomainObject returns DomainObject:
	Entity | ValueObject_Impl | BasicType | Enum | DataTransferObject | Trait | CommandEvent | DomainEvent;

















Event returns Event:
	CommandEvent | DomainEvent;


EString returns ecore::EString:
	STRING | ID;

Module returns Module:
	{Module}
	(external?='external')?
	'Module'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('basePackage' basePackage=EString)?
		('persistenceUnit' persistenceUnit=EString)?
		('domainObjects' '{' domainObjects+=DomainObject ( "," domainObjects+=DomainObject)* '}' )?
		('services' '{' services+=Service ( "," services+=Service)* '}' )?
		('consumers' '{' consumers+=Consumer ( "," consumers+=Consumer)* '}' )?
		('resources' '{' resources+=Resource ( "," resources+=Resource)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Service returns Service:
	{Service}
	(gapClass?='gapClass')?
	(webService?='webService')?
	'Service'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('otherDependencies' '{' otherDependencies+=EString ( "," otherDependencies+=EString)* '}' )?
		('remoteInterface' remoteInterface=EBoolean)?
		('localInterface' localInterface=EBoolean)?
		('repositoryDependencies' '(' repositoryDependencies+=[Repository|EString] ( "," repositoryDependencies+=[Repository|EString])* ')' )?
		('serviceDependencies' '(' serviceDependencies+=[Service|EString] ( "," serviceDependencies+=[Service|EString])* ')' )?
		('subscribe' subscribe=[Subscribe|EString])?
		('operations' '{' operations+=ServiceOperation ( "," operations+=ServiceOperation)* '}' )?
	'}';

Consumer returns Consumer:
	{Consumer}
	'Consumer'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('channel' channel=EString)?
		('otherDependencies' '{' otherDependencies+=EString ( "," otherDependencies+=EString)* '}' )?
		('repositoryDependencies' '(' repositoryDependencies+=[Repository|EString] ( "," repositoryDependencies+=[Repository|EString])* ')' )?
		('serviceDependencies' '(' serviceDependencies+=[Service|EString] ( "," serviceDependencies+=[Service|EString])* ')' )?
		('messageRoot' messageRoot=[DomainObject|EString])?
		('subscribe' subscribe=[Subscribe|EString])?
	'}';

Resource returns Resource:
	{Resource}
	(gapClass?='gapClass')?
	'Resource'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('path' path=EString)?
		('serviceDependencies' '(' serviceDependencies+=[Service|EString] ( "," serviceDependencies+=[Service|EString])* ')' )?
		('operations' '{' operations+=ResourceOperation ( "," operations+=ResourceOperation)* '}' )?
	'}';

Reference returns Reference:
	(many?='many')?
	(required?='required')?
	(cache?='cache')?
	(naturalKey?='naturalKey')?
	(inverse?='inverse')?
	(nullable?='nullable')?
	(transient?='transient')?
	'Reference'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('collectionType' collectionType=EString)?
		('cascade' cascade=EString)?
		('orderBy' orderBy=EString)?
		('visibility' visibility=EString)?
		('changeable' changeable=EBoolean)?
		('fetch' fetch=EString)?
		('databaseColumn' databaseColumn=EString)?
		('validate' validate=EString)?
		('databaseJoinTable' databaseJoinTable=EString)?
		('databaseJoinColumn' databaseJoinColumn=EString)?
		('opposite' opposite=[Reference|EString])?
		'to' to=[DomainObject|EString]
	'}';

Attribute returns Attribute:
	{Attribute}
	(nullable?='nullable')?
	(naturalKey?='naturalKey')?
	(required?='required')?
	(index?='index')?
	(transient?='transient')?
	'Attribute'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('type' type=EString)?
		('collectionType' collectionType=EString)?
		('mapKeyType' mapKeyType=EString)?
		('changeable' changeable=EBoolean)?
		('databaseType' databaseType=EString)?
		('visibility' visibility=EString)?
		('length' length=EString)?
		('databaseColumn' databaseColumn=EString)?
		('validate' validate=EString)?
	'}';

Repository returns Repository:
	{Repository}
	(gapClass?='gapClass')?
	'Repository'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('otherDependencies' '{' otherDependencies+=EString ( "," otherDependencies+=EString)* '}' )?
		('repositoryDependencies' '(' repositoryDependencies+=[Repository|EString] ( "," repositoryDependencies+=[Repository|EString])* ')' )?
		('subscribe' subscribe=[Subscribe|EString])?
		('operations' '{' operations+=RepositoryOperation ( "," operations+=RepositoryOperation)* '}' )?
	'}';

Inheritance returns Inheritance:
	{Inheritance}
	'Inheritance'
	'{'
		('discriminatorColumnName' discriminatorColumnName=EString)?
		('discriminatorColumnLength' discriminatorColumnLength=EString)?
		('type' type=InheritanceType)?
		('discriminatorType' discriminatorType=DiscriminatorType)?
	'}';

DomainObjectOperation returns DomainObjectOperation:
	{DomainObjectOperation}
	(abstract?='abstract')?
	'DomainObjectOperation'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('type' type=EString)?
		('collectionType' collectionType=EString)?
		('mapKeyType' mapKeyType=EString)?
		('throws' throws=EString)?
		('visibility' visibility=EString)?
		('domainObjectType' domainObjectType=[DomainObject|EString])?
		('mapKeyDomainObjectType' mapKeyDomainObjectType=[DomainObject|EString])?
		('publish' publish=[Publish|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Trait returns Trait:
	{Trait}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	'Trait'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
	'}';

Entity returns Entity:
	{Entity}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	'Entity'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('auditable' auditable=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
	'}';

ValueObject_Impl returns ValueObject:
	{ValueObject}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	'ValueObject'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('immutable' immutable=EBoolean)?
		('persistent' persistent=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
	'}';

BasicType returns BasicType:
	{BasicType}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	'BasicType'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('immutable' immutable=EBoolean)?
		('persistent' persistent=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
	'}';

Enum returns Enum:
	{Enum}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	(ordinal?='ordinal')?
	'Enum'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
		('values' '{' values+=EnumValue ( "," values+=EnumValue)* '}' )?
	'}';

DataTransferObject returns DataTransferObject:
	{DataTransferObject}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	'DataTransferObject'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('immutable' immutable=EBoolean)?
		('persistent' persistent=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
	'}';

CommandEvent returns CommandEvent:
	{CommandEvent}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	'CommandEvent'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('immutable' immutable=EBoolean)?
		('persistent' persistent=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
	'}';

DomainEvent returns DomainEvent:
	{DomainEvent}
	(abstract?='abstract')?
	(cache?='cache')?
	(gapClass?='gapClass')?
	'DomainEvent'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('optimisticLocking' optimisticLocking=EBoolean)?
		('package' package=EString)?
		('databaseTable' databaseTable=EString)?
		('extendsName' extendsName=EString)?
		('validate' validate=EString)?
		('discriminatorColumnValue' discriminatorColumnValue=EString)?
		('aggregateRoot' aggregateRoot=EBoolean)?
		('immutable' immutable=EBoolean)?
		('persistent' persistent=EBoolean)?
		('extends' extends=[DomainObject|EString])?
		('inheritance' inheritance=[Inheritance|EString])?
		('belongsToAggregate' belongsToAggregate=[DomainObject|EString])?
		('traits' '(' traits+=[Trait|EString] ( "," traits+=[Trait|EString])* ')' )?
		('references' '{' references+=Reference ( "," references+=Reference)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('repository' repository=Repository)?
		('operations' '{' operations+=DomainObjectOperation ( "," operations+=DomainObjectOperation)* '}' )?
	'}';

RepositoryOperation returns RepositoryOperation:
	{RepositoryOperation}
	(delegateToAccessObject?='delegateToAccessObject')?
	'RepositoryOperation'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('type' type=EString)?
		('collectionType' collectionType=EString)?
		('mapKeyType' mapKeyType=EString)?
		('throws' throws=EString)?
		('visibility' visibility=EString)?
		('accessObjectName' accessObjectName=EString)?
		('domainObjectType' domainObjectType=[DomainObject|EString])?
		('mapKeyDomainObjectType' mapKeyDomainObjectType=[DomainObject|EString])?
		('publish' publish=[Publish|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Subscribe returns Subscribe:
	{Subscribe}
	'Subscribe'
	'{'
		('eventBus' eventBus=EString)?
		('topic' topic=EString)?
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('type' type=EString)?
		('collectionType' collectionType=EString)?
		('mapKeyType' mapKeyType=EString)?
		('domainObjectType' domainObjectType=[DomainObject|EString])?
		('mapKeyDomainObjectType' mapKeyDomainObjectType=[DomainObject|EString])?
	'}';

Publish returns Publish:
	{Publish}
	'Publish'
	'{'
		('eventBus' eventBus=EString)?
		('topic' topic=EString)?
		('eventType' eventType=[Event|EString])?
	'}';

enum InheritanceType returns InheritanceType:
				SINGLE_TABLE = 'SINGLE_TABLE' | JOINED = 'JOINED';

enum DiscriminatorType returns DiscriminatorType:
				STRING = 'STRING' | CHAR = 'CHAR' | INTEGER = 'INTEGER';

EnumValue returns EnumValue:
	{EnumValue}
	'EnumValue'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('parameters' '{' parameters+=EnumConstructorParameter ( "," parameters+=EnumConstructorParameter)* '}' )?
	'}';

EnumConstructorParameter returns EnumConstructorParameter:
	{EnumConstructorParameter}
	'EnumConstructorParameter'
	'{'
		('value' value=EString)?
	'}';

ServiceOperation returns ServiceOperation:
	{ServiceOperation}
	'ServiceOperation'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('type' type=EString)?
		('collectionType' collectionType=EString)?
		('mapKeyType' mapKeyType=EString)?
		('throws' throws=EString)?
		('visibility' visibility=EString)?
		('domainObjectType' domainObjectType=[DomainObject|EString])?
		('mapKeyDomainObjectType' mapKeyDomainObjectType=[DomainObject|EString])?
		('publish' publish=[Publish|EString])?
		('serviceDelegate' serviceDelegate=[ServiceOperation|EString])?
		('delegate' delegate=[RepositoryOperation|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

ResourceOperation returns ResourceOperation:
	{ResourceOperation}
	'ResourceOperation'
	name=EString
	'{'
		('doc' doc=EString)?
		('hint' hint=EString)?
		('type' type=EString)?
		('collectionType' collectionType=EString)?
		('mapKeyType' mapKeyType=EString)?
		('throws' throws=EString)?
		('visibility' visibility=EString)?
		('path' path=EString)?
		('httpMethod' httpMethod=HttpMethod)?
		('returnString' returnString=EString)?
		('domainObjectType' domainObjectType=[DomainObject|EString])?
		('mapKeyDomainObjectType' mapKeyDomainObjectType=[DomainObject|EString])?
		('publish' publish=[Publish|EString])?
		('delegate' delegate=[ServiceOperation|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

enum HttpMethod returns HttpMethod:
				UNDEFINED = 'UNDEFINED' | GET = 'GET' | POST = 'POST' | PUT = 'PUT' | DELETE = 'DELETE';
